{"version":3,"sources":["component/Card.js","component/RollPage.js","component/CollectionPage.js","component/SearchInfo.js","logic/Anilist.js","logic/Data.js","component/App.js","index.js"],"names":["Card","props","state","dateObtained","className","this","character","name","media","value","onClick","handleMediaSearch","mediaId","src","image","alt","React","Component","RollPage","renderCard","id","renderSkippedCard","handleClaimSkipped","handleRemoveSkipped","isCardTransitioning","isInterfaceTransitioning","onSkipPage","currentCharacter","nextCharacter","prevProps","setState","currentCard","nextCard","skippedCards","skippedCharacters","map","rerollButton","handleReroll","cardTransitionClass","backgroundCardClasses","rollsTransitionClass","skipsTransitionClass","switchButtonTransitionClass","style","overflow","totalMoney","display","onAnimationEnd","onInterfaceTransitionFinish","onCardTransitionFinish","numberRemainingCharacters","handleClaim","handleSkip","handleInterfaceClick","length","handleRemoveAllSkipped","CollectionPage","handleRemove","handleSearch","event","target","charactersList","characters","query","toLowerCase","searchList","filter","includes","searchResults","pageNum","handleClearSearch","searchInput","document","getElementById","dispatchEvent","Event","bubbles","handleRemoveAll","window","confirm","handleRemoveAllCollected","changePage","newPage","oldPage","numPages","Math","floor","innerText","sortMethod","sortAscending","methodName","arrowComponent","emptyArrowComponent","changeSortMethod","arg1","arg2","method","sort","char1","char2","compareFields","Date","parse","reverse","cardsList","slice","renderSortButton","type","placeholder","onInput","SearchInfo","isTransitioning","searchOverlayTransitionClass","genres","join","onTransitionFinish","handleCloseSearch","title","startDate","endDate","description","averageScore","source","fetch","require","getCharactersByIds","ids","url","options","headers","body","JSON","stringify","variables","id_in","page","perPage","console","log","then","res","json","getMediaById","collectionData","localStorage","collection","generateCharacterIds","idSet","Set","size","random","has","hasOwnProperty","add","Array","from","addCharacterToCollection","data","removeCharacterFromCollection","anilistToCharacter","anilistChar","full","nodes","romaji","favourites","large","anilistToMedia","anilistMedia","UTC","year","month","day","toLocaleDateString","coverImage","saveDataToStorage","App","updateRollBuffer","oldBuffer","a","newCharacters","characterBuffer","concat","Page","rolledCharacterBuffer","claimedCharacter","Object","keys","rolledCharacterStack","pop","collectedCharacters","skippedCharacter","skippedCharacterStack","push","forEach","setRollCharacters","handleRemoveCollected","collectedState","assign","mediaInfo","Media","searchMedia","setCollectedCharacters","setTotalMoney","addEventListener","ev","rollStack","hasNextPage","charactersData","pageInfo","money","to","exact","path","values","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.96921036.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nexport default class Card extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dateObtained: this.props.dateObtained\n        };\n    }\n    render() {\n        return (\n            <div className=\"card\">\n                <h2>{this.props.character.name}</h2>\n                <h4>{this.props.character.media}</h4>\n                <p>{this.props.character.value}</p>\n                <img\n                    onClick={() => this.props.handleMediaSearch(this.props.character.mediaId)}\n                    src={this.props.character.image} alt=\"Character\"/>\n            </div>\n        );\n    };\n};\n","import React from 'react';\nimport Card from './Card';\nimport './RollPage.css';\n\nexport default class RollPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCardTransitioning: false,\n            isInterfaceTransitioning: false,\n            onSkipPage: false,\n            currentCharacter: props.currentCharacter,\n            nextCharacter: props.nextCharacter\n        }\n    }\n\n    // Given a character, return a card component\n    renderCard = (character) => {\n        return <Card \n            character={character}\n            key={character.id}\n            handleMediaSearch={this.props.handleMediaSearch}/>\n    }\n\n    // Given a skipped character, return a card component and an additional\n    // button to claim it\n    renderSkippedCard = (character) => {\n        return <div className=\"card-container\" key={character.id}>\n                <Card\n                    character={character}\n                    handleMediaSearch={this.props.handleMediaSearch}/>\n                <div className=\"card-buttons\">\n                    <button onClick={() => this.props.handleClaimSkipped(character)}>\n                        Claim\n                    </button>\n                    <button onClick={() => this.props.handleRemoveSkipped(character)}>\n                        Remove\n                    </button>\n                </div>\n            </div>\n    }\n\n    // When new props are given, change the state to update cards and handle\n    // animations\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCharacter !== this.props.currentCharacter) {\n            if (!prevProps.currentCharacter) {\n                this.setState({\n                    isCardTransitioning: true,\n                    nextCharacter: this.props.currentCharacter\n                });\n            }\n            // Otherwise trigger transition\n            else {\n                this.setState({isCardTransitioning: true});\n            }\n        }\n    }\n\n    // When card animations finish, change transition state and update characters\n    onCardTransitionFinish() {\n        // Prevent animations when an irrelevant animation finishes\n        if (this.state.isCardTransitioning) {\n            this.setState({\n                isCardTransitioning: false,\n                currentCharacter: this.props.currentCharacter,\n                nextCharacter: this.props.nextCharacter\n            });\n        }\n    }\n\n    // When interface button is clicked, handle animation\n    handleInterfaceClick() {\n        this.setState({\n            isInterfaceTransitioning: true\n        });\n    }\n\n    // When interface transition animations finish, change transition and interface state\n    onInterfaceTransitionFinish() {\n        // Prevent animations when an irrelevant animation finishes\n        if (this.state.isInterfaceTransitioning) {\n            this.setState({\n                isInterfaceTransitioning: false,\n                onSkipPage: !this.state.onSkipPage\n            });\n        }\n    }\n\n    // TODO: Reroll can be pressed multiple times\n    render() {\n        // Build card components based on props character data\n        let currentCard = this.state.currentCharacter ? \n            this.renderCard(this.state.currentCharacter) : null;\n        let nextCard = this.state.nextCharacter ?\n            this.renderCard(this.state.nextCharacter) : null;\n        let skippedCards = this.props.skippedCharacters.map(this.renderSkippedCard);\n        // Reroll button if cards run out\n        let rerollButton = !this.state.currentCharacter && !this.state.isCardTransitioning ?\n            <button className=\"reroll-button\"\n                onClick={this.props.handleReroll}>Reroll</button> : null;\n\n        // Define classNames based on whether the cards are in transition state\n        let cardTransitionClass = this.state.isCardTransitioning\n            ? \" is-transitioning\" : \"\";\n        // If there is still a card to load in, keep a card in the background\n        // for transitions\n        let backgroundCardClasses = this.props.nextCharacter\n            ? \"card next-card\" : \"\";\n\n        // Define classNames for whether the user is transitioning from rolls to skips\n        // For the switch button, change its state for animations\n        let rollsTransitionClass = \"\";\n        let skipsTransitionClass = \"\";\n        let switchButtonTransitionClass = \"\";\n        if (this.state.isInterfaceTransitioning) {\n            rollsTransitionClass = this.state.onSkipPage ? \" is-entering\" : \" is-leaving\";\n            skipsTransitionClass = this.state.onSkipPage ? \" is-leaving\" : \" is-entering\";\n            switchButtonTransitionClass = this.state.onSkipPage ? \" to-rolls\" : \" to-skips\";\n        }\n\n        // While transitioning, disallow overflow to prevent scrollbars\n        return (\n            <div style={\n                    this.state.isInterfaceTransitioning ? {overflow: 'hidden'} : {}}\n                className=\"roll-page\">\n\n                <div className=\"info-bar\">\n                    <h1>Gacha Website</h1>\n                    <h4 className=\"info-right-element\">${this.props.totalMoney}</h4>\n                </div>\n\n                <div style={\n                        this.state.onSkipPage &&\n                        !this.state.isInterfaceTransitioning ? {display: 'none'} : {}}\n                    onAnimationEnd={() => this.onInterfaceTransitionFinish()}\n                    className={\"rolls\" + rollsTransitionClass}>\n\n                    <div className=\"card-grid\">\n                        {rerollButton}\n\n                        <div onAnimationEnd={() => this.onCardTransitionFinish()}\n                            className={\"current-card\" + cardTransitionClass}>\n                            {currentCard}\n                        </div>\n\n                        <div className={backgroundCardClasses} />\n\n                        {nextCard &&\n                            <div className={\"next-card\" + cardTransitionClass}>\n                                <div className=\"card card-back\">\n                                </div>\n                                <div className=\"card-front\">\n                                    {nextCard}\n                                </div>\n                            </div>\n                        }\n                    </div>\n                    <p>Cards remaining: {this.props.numberRemainingCharacters}</p>\n\n                    {/* Buttons shouldn't function while animations are playing */}\n                    <div className=\"roll-buttons\">\n                        <button onClick={!this.state.isCardTransitioning ?\n                            this.props.handleClaim : null}>Claim</button>\n                        <button onClick={!this.state.isCardTransitioning ?\n                            this.props.handleSkip : null}>Skip</button>\n                    </div>\n                </div>\n\n                <button onClick={!this.state.isCardTransitioning ?\n                    () => this.handleInterfaceClick() : null}\n                    className={\"switch-button\" + (this.state.onSkipPage ? \" left\" : \" right\") +\n                        switchButtonTransitionClass}>\n                    &gt;\n                </button>\n\n                \n                <div\n                    style={!this.state.onSkipPage &&\n                        !this.state.isInterfaceTransitioning ? {display: 'none'} : {}}\n                    className={\"flex-list skips\" + skipsTransitionClass}>\n                    <div className=\"info-bar option-bar\" \n                        style={skippedCards.length === 0 ? {display: 'none'} : {}}>\n                        <button className=\"sub-button info-right-element\"\n                            onClick={this.props.handleRemoveAllSkipped}>\n                            Remove All\n                        </button>\n                    </div>\n                    {skippedCards}\n                </div>\n                \n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Card from './Card';\nimport './CollectionPage.css';\n\nexport default class CollectionPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortMethod: 'Date Obtained',\n            sortAscending: true,\n            searchResults: null,\n            pageNum: 0\n        }\n    }\n\n    // Given a character, return a card component with relevant buttons\n    renderCard = (character) => {\n        return <div className=\"card-container\" key={character.id}>\n                <Card \n                    character={character}\n                    handleMediaSearch={this.props.handleMediaSearch}\n                    key={character.id}/>\n                <div className=\"card-buttons\">\n                    <button onClick={() => this.props.handleRemove(character)}>\n                        Remove\n                    </button>\n                </div>\n            </div>\n    }\n\n    // Returns a sort button based on the given sortMethod\n    renderSortButton(methodName) {\n        // Arrow components for sorting\n        let arrowComponent = this.state.sortAscending ? \n            <p className=\"sort-button-arrow\">↑</p> :\n            <p className=\"sort-button-arrow\">↓</p>;\n        let emptyArrowComponent = <p className=\"sort-button-arrow\"></p>;\n\n        return <button className=\"sort-button option\"\n                onClick={() => this.changeSortMethod(methodName)}>\n                <p className=\"sort-button-text\">{methodName}</p>\n                {this.state.sortMethod === methodName ?\n                    arrowComponent : emptyArrowComponent}\n            </button>\n    }\n\n    // Compare helper function for sorting\n    compareFields(arg1, arg2) {\n        if (arg1 > arg2) return 1;\n        if (arg1 === arg2) return 0;\n        return -1;\n    }\n\n    // Change sort method depending on current state\n    changeSortMethod(method) {\n        // Change sort order if the same method was chosen\n        // Otherwise change method and set order to ascending\n        if (this.state.sortMethod === method) {\n            this.setState({sortAscending: !this.state.sortAscending});\n        }\n        else {\n            this.setState({sortMethod: method, sortAscending: true});\n        }\n    }\n\n    // Update searchResults whenever something is typed in the search bar\n    handleSearch = (event) => {\n        if (event.target.value) {\n            let charactersList = this.props.characters;\n            let query = event.target.value.toLowerCase();\n            let searchList = charactersList.filter((character) => {\n                let name = character.name.toLowerCase();\n                let media = character.media.toLowerCase();\n                return name.includes(query) || media.includes(query)\n            });\n            this.setState({searchResults: searchList, pageNum: 0});\n        }\n        else {\n            this.setState({searchResults: null, pageNum: 0});\n        }\n    }\n\n    // Clear the current search query\n    handleClearSearch = () => {\n        let searchInput = document.getElementById('search-form');\n        searchInput.value = '';\n        searchInput.dispatchEvent(new Event('input', {bubbles: true}));\n\n    }\n\n    // Handle remove all by passing only the characters that the user can\n    // currently see\n    handleRemoveAll = () => {\n        if (window.confirm(\"Remove all characters shown from collection?\")) {\n            if (this.state.searchResults) {\n                this.props.handleRemoveAllCollected(this.state.searchResults);\n\n                // Clear the search prompt\n                this.handleClearSearch();\n            }\n            else {\n                this.props.handleRemoveAllCollected(this.props.characters);\n            }\n        }\n    }\n\n    // Change the page of cards that is currently being displayed\n    // based on the button pressed\n    changePage = (event) => {\n        let oldPage = this.state.pageNum;\n        let newPage;\n        let numPages = this.state.searchResults ?\n            Math.floor(this.state.searchResults.length / 20) + 1 :\n            Math.floor(this.props.characters.length / 20) + 1;\n        if (numPages === 0) return;\n\n        // Going above or below page limit should circle around\n        if (event.target.innerText === '<') {\n            newPage = ((oldPage - 1) + numPages) % numPages;\n        }\n        else if (event.target.innerText === '>') {\n            newPage = ((oldPage + 1) + numPages) % numPages;\n        }\n\n        this.setState({pageNum: newPage});\n    }\n\n    render() {\n        // Build card components based on props character data\n        // If a search was done, use those characters instead\n        let charactersList = this.state.searchResults ?\n            this.state.searchResults : this.props.characters;\n\n        // Sort based on selection\n        switch (this.state.sortMethod) {\n            case 'Date Obtained':\n                charactersList.sort((char1, char2) =>\n                    this.compareFields(Date.parse(char1.dateObtained),\n                        Date.parse(char2.dateObtained)));\n                break;\n            case 'Name':\n                charactersList.sort((char1, char2) =>\n                    this.compareFields(char1.name, char2.name));\n                break;\n            case 'Media':\n                charactersList.sort((char1, char2) =>\n                    this.compareFields(char1.media, char2.media));\n                break;\n            case 'Value':\n                charactersList.sort((char1, char2) =>\n                    this.compareFields(char1.value, char2.value));\n                break;\n            default:\n                break;\n        }\n        // Change order if necessary\n        if (!this.state.sortAscending) charactersList.reverse();\n\n        // Only render enough cards to fit a page\n        charactersList = charactersList.slice(this.state.pageNum*20, (this.state.pageNum+1)*20);\n        let cardsList = charactersList.map(this.renderCard);\n\n        return (\n            <div className=\"collection-page\">\n\n                <div className=\"info-bar\">\n                    <h1>Collection</h1>\n                    <h4 className=\"info-right-element\">${this.props.totalMoney}</h4>\n                </div>\n\n                <div className=\"info-bar option-bar\">\n                    <div className=\"sort-container\">\n                        <button className=\"sort-button\">\n                            Sort\n                        </button>\n                        <div className=\"sort-menu\">\n                            {this.renderSortButton('Date Obtained')}\n                            {this.renderSortButton('Name')}\n                            {this.renderSortButton('Media')}\n                            {this.renderSortButton('Value')}\n                        </div>\n                    </div>\n                    <div className=\"search-form\">\n                        <input type=\"text\" id=\"search-form\"\n                            placeholder=\"Search\" onInput={this.handleSearch}/>\n                        <button onClick={this.handleClearSearch}>\n                            Clear\n                        </button>\n                    </div>\n                    <div className=\"remove-all-button\">\n                        <button className=\"sub-button\" onClick={this.handleRemoveAll}>\n                            Remove All\n                        </button>\n                    </div>\n                    <div className=\"page-settings info-right-element\">\n                        <button onClick={this.changePage}>&lt;</button>\n                        <span>{this.state.pageNum + 1}</span>\n                        <button onClick={this.changePage}>&gt;</button>\n                    </div>\n                </div>\n                <div className=\"flex-list\">\n                    {cardsList}\n                </div>\n                <div className=\"info-bar option-bar\">\n                    <div className=\"page-settings info-right-element\">\n                        <button onClick={this.changePage}>&lt;</button>\n                        <span>{this.state.pageNum + 1}</span>\n                        <button onClick={this.changePage}>&gt;</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './SearchInfo.css';\n\nexport default class SearchInfo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isTransitioning: false,\n            media: null\n        };\n    }\n\n    // When new props are given, update media info if necessary and start\n    // animations\n    componentDidUpdate(prevProps) {\n        if (prevProps.media !== this.props.media) {\n            // Keep the state if transitioning out, update if transitioning in\n            this.setState({\n                isTransitioning: true,\n                media: this.props.media ? this.props.media : this.state.media\n            });\n        }\n    }\n\n    // When search card animations finish, change transition state and update\n    // media if necessary\n    onTransitionFinish() {\n        if (!this.props.media) {\n            this.setState({isTransitioning: false, media: null});\n        }\n        else {\n            this.setState({isTransitioning: false});\n        }\n    }\n\n    render() {\n        // Define animation class names for the overlay\n        let searchOverlayTransitionClass = \"\";\n        if (this.state.isTransitioning) {\n            searchOverlayTransitionClass = this.props.media ? \" is-entering\" : \" is-leaving\"\n        }\n\n        if (this.state.media) {\n            let genres = this.state.media.genres.join(\", \");\n\n            return (\n                <div onAnimationEnd={() => this.onTransitionFinish()}>\n                    <div className={\"dim-overlay\" + searchOverlayTransitionClass}\n                        onClick={!this.state.isTransitioning ? this.props.handleCloseSearch : null}/>\n                    <div className={\"search-card\" + searchOverlayTransitionClass}>\n                        <div className=\"left-bar\">\n                            <img src={this.state.media.image} alt=\"Media\"/>\n                            <h2>{this.state.media.title}</h2>\n                            <p>{this.state.media.type}</p>\n                            <p>Genres: {genres}</p>\n                            <p>Start Date: {this.state.media.startDate}</p>\n                            <p>End Date: {this.state.media.endDate}</p>\n                        </div>\n                        <div className=\"main-info\">\n                            <p>{this.state.media.description}</p>\n                            <p>Score: {this.state.media.averageScore}</p>\n                            <p>Source: {this.state.media.source}</p>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else\n            return null;\n    }\n}\n","const fetch = require('node-fetch');\n\n// Fetches character information for the given id\nfunction getCharacterById(id) {\n    let query = `\n        query ($id: Int) {\n            Character (id: $id) {\n                id\n                name {\n                    full\n                }\n                favourites\n                image {\n                    large\n                }\n                media (perPage:1) {\n                    nodes {\n                        id\n                        title {\n                            romaji\n                        }\n                    }\n                }\n            }\n        }`;\n\n    var url = 'https://graphql.anilist.co',\n    options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query,\n            variables: {id: id}\n        })\n    };\n    console.log(\"Call to API: Singular\");\n  \n    return fetch(url, options).then((res) => {return res.json()});\n};\n\n// Fetches character information for the given ids\n// Optionally takes pageNum as a value, otherwise default 1\nfunction getCharactersByIds(ids, pageNum = 1) {\n    let query = `\n        query ($id_in:[Int], $page:Int, $perPage:Int) {\n\t        Page(page:$page, perPage:$perPage) {\n                pageInfo {\n                    total\n                    perPage\n                    currentPage\n                    lastPage\n                    hasNextPage\n                }\n                characters (id_in:$id_in){\n                    id\n                    name {\n                        full\n                    }\n                    favourites\n                    image {\n                        large\n                    }\n                    media (perPage:1) {\n                        nodes {\n                            id\n                            title {\n                                romaji\n                            }\n                        }\n                    }\n  \t            }\n            }\n        }`;\n\n    var url = 'https://graphql.anilist.co',\n    options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query,\n            variables: {id_in: ids, page: pageNum, perPage: 50}\n        })\n    };\n    console.log(\"Call to API: Page\");\n  \n    return fetch(url, options).then((res) => {return res.json()});\n};\n\nfunction getMediaById(id) {\n    let query = `\n        query ($id: Int) {\n            Media (id: $id) {\n                title {\n                    romaji\n                    english\n                    native\n                    userPreferred\n                }\n                description\n                startDate {\n                    year\n                    month\n                    day\n                }\n                endDate {\n                    year\n                    month\n                    day\n                }\n                type\n                status\n                genres\n                averageScore\n                popularity\n                source\n                id\n                coverImage {\n                    large\n                }\n            }\n        }`;\n\n    var url = 'https://graphql.anilist.co',\n    options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n            query: query,\n            variables: {id: id}\n        })\n    };\n    console.log(\"Call to API: Media\");\n\n    return fetch(url, options).then((res) => {return res.json()});\n}\n\nexport {getCharacterById, getCharactersByIds, getMediaById};\n","// Might want to make this connect to a database\n// For now, just use localStorage\nvar collectionData = localStorage.collection ?\n    JSON.parse(localStorage.collection) : {};\n\n// Generate array of random character IDs for RollPage keeping track of what\n// has been rolled\n// Seems like 229946 is the highest ID offered by Anilist\n// Some IDs seem to be missing (e.g. 8, 9, 10)\nfunction generateCharacterIds() {\n    console.log(\"Generating characters\");\n    let idSet = new Set();\n    while (idSet.size < 100) {\n        let id = Math.floor(Math.random() * 229946);\n        if (!idSet.has(id) && !collectionData.hasOwnProperty(id))\n            idSet.add(id)\n    }\n    return Array.from(idSet);\n}\n\n\n// Get the character IDs that have already been collected\nfunction getCollectedCharacterIds() {\n    console.log(\"Getting collected characters\");\n    return Object.keys(collectionData);\n}\n\n// Get the total money the user has from localStorage\nfunction getTotalMoney() {\n    console.log(\"Getting total money\");\n    return localStorage.totalMoney | 0;\n}\n\n// Add the given id to the user's collection (stored in localStorage)\nfunction addCharacterToCollection(id) {\n    console.log(\"Adding character to collection\");\n\n    if (!collectionData.hasOwnProperty(id)) {\n        collectionData[id] = {data: {dateObtained: new Date()}};\n    }\n}\n\n// Remove the given id from the user's collection\nfunction removeCharacterFromCollection(id) {\n    console.log(\"Removing character from collection\");\n\n    delete collectionData[id];\n}\n\n// Format an Anilist character into an object for direct use\nfunction anilistToCharacter(anilistChar) {\n    // If the character was already obtained,\n    // provide the date for sorting purposes\n    let dateObtained = collectionData[anilistChar.id] ?\n        collectionData[anilistChar.id].data.dateObtained : null;\n\n    return {\n        id: anilistChar.id,\n        name: anilistChar.name.full,\n        media: anilistChar.media.nodes[0] ?\n            anilistChar.media.nodes[0].title.romaji : null,\n        mediaId: anilistChar.media.nodes[0] ?\n            anilistChar.media.nodes[0].id : null,\n        value: anilistChar.favourites,\n        image: anilistChar.image.large,\n        dateObtained: dateObtained\n    };\n}\n\n// Format an Anilist media into an object for direct use\nfunction anilistToMedia(anilistMedia) {\n    let startDate = new Date(Date.UTC(\n        anilistMedia.startDate.year, anilistMedia.startDate.month-1, anilistMedia.startDate.day+1\n    )).toLocaleDateString();\n    let endDate = new Date(Date.UTC(\n        anilistMedia.endDate.year, anilistMedia.endDate.month-1, anilistMedia.endDate.day+1\n    )).toLocaleDateString();\n\n    return {\n        id: anilistMedia.id,\n        image: anilistMedia.coverImage.large,\n        title: anilistMedia.title.romaji,\n        description: anilistMedia.description,\n        type: anilistMedia.type,\n        genres: anilistMedia.genres,\n        averageScore: anilistMedia.averageScore,\n        startDate: startDate,\n        endDate: endDate,\n        source: anilistMedia.source\n    }\n}\n\n// Save collection to localstorage, to be called on page exit or at intervals\nfunction saveDataToStorage(data) {\n    console.log(\"Saving to storage\");\n    localStorage.collection = JSON.stringify(collectionData);\n    localStorage.totalMoney = JSON.stringify(data.totalMoney);\n}\n\nexport {generateCharacterIds, getCollectedCharacterIds,\n    addCharacterToCollection, removeCharacterFromCollection,\n    anilistToCharacter, anilistToMedia, saveDataToStorage, getTotalMoney};\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\n\nimport RollPage from './RollPage';\nimport CollectionPage from './CollectionPage';\nimport SearchInfo from './SearchInfo';\nimport {getCharactersByIds, getMediaById} from '../logic/Anilist.js';\nimport {generateCharacterIds, getCollectedCharacterIds, getTotalMoney,\n    addCharacterToCollection, removeCharacterFromCollection,\n    anilistToCharacter, anilistToMedia, saveDataToStorage}\n    from '../logic/Data';\nimport './App.css'\n\n// App with router for switching between pages\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentCharacter: null,         // RollPage: Current character\n            nextCharacter: null,            // RollPage: Next character\n            rolledCharacterStack: [],       // RollPage: Stack of remaining characters\n            rolledCharacterBuffer: [],      // RollPage: Buffer characters to reduce API calls, invisible to user\n            skippedCharacterStack: [],      // RollPage: Array of skipped characters\n            collectedCharacters: {},        // CollectionPage: {id: character} pairs for all collected characters\n            searchMedia: null,              // Object representing media for searching, null if no search active\n            totalMoney: 0\n        };\n    }\n\n    componentDidMount() {\n        // Set the characters that appear on the roll page\n        this.setRollCharacters();\n        this.setCollectedCharacters(getCollectedCharacterIds());\n        this.setTotalMoney(getTotalMoney());\n\n        // Set up event listener on page close to save data\n        window.addEventListener(\"beforeunload\", (ev) => {\n            saveDataToStorage({\n                totalMoney: this.state.totalMoney\n            });\n        });\n    }\n\n    // Asynchronously update the old roll buffer\n    updateRollBuffer = async (oldBuffer) => {\n        // TODO: Consider mutex or similar to prevent this function from\n        // running multiple times\n        let newCharacters = await getCharactersByIds(generateCharacterIds());\n        let characterBuffer = oldBuffer.concat(newCharacters.data.Page.characters);\n        this.setState({rolledCharacterBuffer: characterBuffer});\n    }\n\n    // Set the state to contain randomly generated characters for rolling\n    async setRollCharacters() {\n        // Get the character data returned by Anilist\n        // Update the roll buffer if no characters are available\n        // (This should hopefully only occur on page load)\n        if (this.state.rolledCharacterBuffer.length === 0) {\n            await this.updateRollBuffer([]);\n        }\n        let characterBuffer = [...this.state.rolledCharacterBuffer];\n        let characters = characterBuffer.slice(0, 10);\n        characterBuffer = characterBuffer.slice(10);\n\n        // Update the state by mapping all returned characters to expected\n        // array format\n        let rollStack = [];\n        characters.forEach((anilistChar) => {\n            let character = anilistToCharacter(anilistChar);\n            rollStack.push({\n                id: character.id,\n                name: character.name,\n                media: character.media,\n                mediaId: character.mediaId,\n                value: character.value,\n                image: character.image,\n            });});\n        this.setState({\n            currentCharacter: rollStack.pop(),\n            nextCharacter: rollStack.pop(),\n            rolledCharacterStack: rollStack,\n            rolledCharacterBuffer: characterBuffer\n        }, () => {\n            // TODO: Carefully inspect this logic to avoid race conditions\n            // After updating state, add characters to roll buffer if running low\n            if (characterBuffer.length < 20) {\n                this.updateRollBuffer(characterBuffer);\n            }\n        });\n\n    }\n\n    // Set the state to contain characters already in the collection\n    async setCollectedCharacters(ids) {\n        let collectedState = {};\n        let hasNextPage = true;\n        let pageNum = 1;\n\n        // Loop in order to get all the pages\n        while (hasNextPage) {\n            // Get the character data returned by Anilist\n            let charactersData = await getCharactersByIds(ids, pageNum);\n\n            // Update the state by mapping all returned characters to expected\n            // array format\n            charactersData.data.Page.characters.forEach((anilistChar) => {\n                let character = anilistToCharacter(anilistChar);\n                collectedState[character.id] = {\n                    id: character.id,\n                    name: character.name,\n                    media: character.media,\n                    mediaId: character.mediaId,\n                    value: character.value,\n                    image: character.image,\n                    dateObtained: character.dateObtained\n                };});\n\n            hasNextPage = charactersData.data.Page.pageInfo.hasNextPage;\n            pageNum += 1;\n        }\n\n        this.setState({collectedCharacters: collectedState});\n    }\n\n    // Set the state with the total money the user already had\n    async setTotalMoney(money) {\n        this.setState({totalMoney: money});\n    }\n\n    // Handle claim when the claim button is clicked on RollPage\n    handleClaim = () => {\n        // Update the state by shifting character data\n        let claimedCharacter = this.state.currentCharacter;\n        if (!claimedCharacter || Object.keys(claimedCharacter).length === 0) return;\n        let rolledCharacterStack = this.state.rolledCharacterStack.slice();\n        let currentCharacter = this.state.nextCharacter;\n        let nextCharacter = rolledCharacterStack.pop();\n\n        // Add the character to collection\n        let collectedCharacters = {...this.state.collectedCharacters};\n        collectedCharacters[claimedCharacter.id] = {\n            ...claimedCharacter, dateObtained: new Date()\n        };\n        addCharacterToCollection(claimedCharacter.id);\n\n        this.setState({\n            rolledCharacterStack: rolledCharacterStack,\n            currentCharacter: currentCharacter,\n            nextCharacter: nextCharacter,\n            collectedCharacters: collectedCharacters\n        });\n\n        console.log(`Claimed character: ${claimedCharacter.id}`);\n    }\n\n    // Handle skip when the skip button is clicked on RollPage\n    handleSkip = () => {\n        // Update the state by shifting character data\n        let skippedCharacter = this.state.currentCharacter;\n        if (!skippedCharacter || Object.keys(skippedCharacter).length === 0) return;\n        let rolledCharacterStack = this.state.rolledCharacterStack.slice();\n        let skippedCharacterStack = this.state.skippedCharacterStack.slice();\n        let currentCharacter = this.state.nextCharacter;\n        let nextCharacter = rolledCharacterStack.pop();\n\n        // Add skipped character to stack for ability to claim in the future\n        skippedCharacterStack.push(skippedCharacter);\n\n        this.setState({\n            rolledCharacterStack: rolledCharacterStack,\n            skippedCharacterStack: skippedCharacterStack,\n            currentCharacter: currentCharacter,\n            nextCharacter: nextCharacter\n        });\n\n        console.log(`Skipped character: ${skippedCharacter.id}`);\n    }\n\n    // Handle claim for skipped characters in RollPage\n    handleClaimSkipped = (character) => {\n        // Remove the skipped character from the list of skips\n        let skippedCharacters = this.state.skippedCharacterStack.filter(\n            (skippedCharacter) => skippedCharacter !== character);\n\n        // Add the character to collection\n        let collectedCharacters = {...this.state.collectedCharacters};\n        collectedCharacters[character.id] = {\n            ...character, dateObtained: new Date()\n        };\n        addCharacterToCollection(character.id);\n\n        // Update state to change skipped characters\n        this.setState({\n            skippedCharacterStack: skippedCharacters,\n            collectedCharacters: collectedCharacters\n        });\n        \n        console.log(`Claimed character: ${character.id}`);\n    }\n\n    // Handle remove for skipped characters in RollPage\n    handleRemoveSkipped = (character) => {\n        // Add the value of the removed character to total money\n        let totalMoney = this.state.totalMoney + character.value;\n\n        // Remove the skipped character from the list of skips\n        let skippedCharacters = this.state.skippedCharacterStack.filter(\n            (skippedCharacter) => skippedCharacter !== character);\n        \n        // Update state to change skipped characters\n        this.setState({\n            skippedCharacterStack: skippedCharacters,\n            totalMoney: totalMoney\n        });\n        console.log(`Removed character: ${character.id}`);\n    }\n\n    // Handle remove all when the remove all button is clicked in\n    // RollPage\n    handleRemoveAllSkipped = () => {\n        // Add the value of the removed characters to total money\n        let totalMoney = this.state.totalMoney;\n        this.state.skippedCharacterStack.forEach((character) =>\n            {totalMoney += character.value});\n\n        // Update state to change skipped characters\n        this.setState({\n            skippedCharacterStack: [],\n            totalMoney: totalMoney\n        });\n        console.log(`Removed all skipped characters`);\n    }\n\n    // Handle reroll when characters run out in RollPage\n    handleReroll = () => {\n        this.setRollCharacters();\n        console.log(\"Rerolling\");\n    }\n\n    // Handle remove when the remove button is clicked on a card in\n    // CollectionPage\n    handleRemoveCollected = (character) => {\n        removeCharacterFromCollection(character.id);\n\n        let collectedState = Object.assign(this.state.collectedCharacters);\n        delete collectedState[character.id];\n\n        this.setState({collectedCharacters: collectedState});\n\n        console.log(`Removed character: ${character.id}`);\n    }\n\n    // Handle remove all when the remove all button is clicked in\n    // CollectionPage\n    handleRemoveAllCollected = (characters) => {\n        let collectedState = Object.assign(this.state.collectedCharacters);\n\n        characters.forEach((character) => {\n            removeCharacterFromCollection(character.id);\n            delete collectedState[character.id];\n            console.log(`Removed character: ${character.id}`);\n        });\n\n        this.setState({collectedCharacters: collectedState});\n    }\n\n    // Handle media search when the search button is clicked on a card\n    handleMediaSearch = async (mediaId) => {\n        let anilistMedia = await getMediaById(mediaId);\n        let mediaInfo = anilistToMedia(anilistMedia.data.Media);\n\n        this.setState({searchMedia: mediaInfo});\n    }\n\n    // Handle closing the search overlay when necessary\n    handleCloseSearch = () => {\n        this.setState({searchMedia: null});\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"app\">\n                    <div className=\"navbar\">\n                        <Link to=\"/GachaWebsite\">Roll</Link>\n                        <Link to=\"/GachaWebsite/collection\">Collection</Link>\n                        <Link to=\"/GachaWebsite\" onClick={saveDataToStorage}>Save</Link>\n                    </div>\n                    <SearchInfo\n                        media={this.state.searchMedia}\n                        handleCloseSearch={this.handleCloseSearch}/>\n                    <Switch>\n                        <Route exact path='/GachaWebsite'>\n                            <RollPage\n                                currentCharacter={this.state.currentCharacter}\n                                nextCharacter={this.state.nextCharacter}\n                                numberRemainingCharacters={this.state.rolledCharacterStack.length\n                                    + (this.state.currentCharacter ?\n                                    this.state.nextCharacter ? 2 : 1 : 0)}\n                                skippedCharacters={this.state.skippedCharacterStack}\n                                totalMoney={this.state.totalMoney}\n                                handleClaim={this.handleClaim}\n                                handleSkip={this.handleSkip}\n                                handleClaimSkipped={this.handleClaimSkipped}\n                                handleRemoveSkipped={this.handleRemoveSkipped}\n                                handleRemoveAllSkipped={this.handleRemoveAllSkipped}\n                                handleReroll={this.handleReroll}\n                                handleMediaSearch={this.handleMediaSearch}/>\n                        </Route>\n                        <Route path='/GachaWebsite/collection'>\n                            <CollectionPage\n                                characters={Object.values(this.state.collectedCharacters)}\n                                totalMoney={this.state.totalMoney}\n                                handleRemoveCollected={this.handleRemoveCollected}\n                                handleRemoveAllCollected={this.handleRemoveAllCollected}\n                                handleMediaSearch={this.handleMediaSearch}/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}